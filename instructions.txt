create the SSH key and add it to the ununtu  machine. Now we will start the django projecvt


setting up the virtual environment
1) create virtual environment
 
pre req: install pip and virtual env, refer official page. once you install it it will install the virtual env too

(if not installed, install virtualenv)

--->>> virtualenv -p python3 .

activate vitual env using the following command

--->>> source bin/activate  (use deativate to deactivate it)

install django

-->> pip install django==2.0.7

use --->>[ pip freeze  ] to see the current dependecies, lib installed

--->>> which python

create a src folder and add a project 

--->> django-admin createproject "projectName" .   [dont forget the . at the end]

[the follwoing command is to run server]

--->> python manage.py runserver


inside the project:

# settings.py
BASE DIR gives you the address of the  the directory in which your prejct is, in our case.ist src

secret key: every[roject has a seperate secret key

debug can be set to false when doing in production... uses later

Installed apps: like components you will be creating, like basically the apps

ROOT_URLCONF : this is meant for the routes

templates: html pages rendered in django.

wsgi application : this is how your server works, can change settings.

database: django works well with the data bases,
auth_pass: pass validators

static_URL :  for the static files like images etc.

synching the project : 

----->>>> [manage.py migrate]

to create the user you can use

--->> python manage.py createsuperuser

apps are really gd for storing data , mapping what data you want to store and managing the different parts


create app using the following command

--->>> python manage.py startapp products
 
#Models.py

// in your app you add stuff to models. need more clarity on what are models?

when you ceate and add stuff to your models.py


follwo the steps:

1) add you app name in setting .py under installed app and just mention the name

migrate the changes using the following commands

-->> python manage.py makemigrations
-->> python manage.py migrate

if we want our model to look inside the admin, we need to add to the admin.py under products app [in 

 the app]

from .models import Product

lec9: we will create product objects in python shell

to enable shell
-->> python manage.py shell

after shell shows up , we can import the object and create products

--->>> Product.objects.create(fill the required parameters)

now we will add restriction about the textfields adn etc:

lec10: New model fields
this is more important

deleting files in migrations and deleting the databse to start over

we can refer the following lnk for the referenced models:

https://docs.djangoproject.com/en/3.0/ref/models/fields/#model-field-types

Note:  View is something which handles our requests

now i creates an app pages, have habit of adding the app name in installed apps under settings.py

lec 12: custom homepage

we do our html stuff in view, where we write routes and html codes  and stuff, so import the following library to django thing

-->> from django.http import HttpResponse

step--->>

we do wrte the html and route functions in the view.py of the app.

ex: 
'''
from django.http import HttpResponse


def home_view(*args,**kwargs):
    return HttpResponse("<h1>Hellow world</h1>") '''


??????look about the *args, **kwargs


after adding a route to the view, add its path to the url.py
so that it can be identified by the project, in short can identify the route.



like the following:

from pages import views

urlpatterns = [
    path('', views.home_view, name='home'),
    path('admin/', admin.site.urls),
]

but since there can be multiple views for the better will be directly import the homeview

like the following

from pages.views import home_view
   path('',home_view, name='home'),

lec 13
URL routing and requests

  path(' routes/ ',home_view, name='home'),
we can add as many as routes we want here
depedning upon that, also one thing to notice that the function we have created by default has request argument so we can use that and do a lot sort of operations

def home_view(request,*args,**kwargs):
	by printing see what these arguments are and what they do:

lec 14
Django Templates

we willuse render lib

return something like this
 # 1return "<h1>Hello World<h2>" # its a string of html code
   return render(request,"home.html",{})

now create a location(i.e folder) where you can store the html template.

-->> create the folder under the src dir by a name "templates"

now we want the django to be able to look for this folder of templates, so
we need to add the Dirs under templates under settings as hown below:


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
--->>>>>'DIRS': [os.path.join(BASE_DIR, "templates")],
        here the BASE_DIR is already defined by the django to get the os indipendent directory

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



in thi sfashion you can create home.html, contact.html,about.html , it will work. The only thing is there are a lot of repetetiveness so we need to change that.

how : ans is template inheritance

lec 15
Django template engine basics

template inheritence

convention :  create a base html page == "base.html"which is the root html page.


--->>> {% %} , a syntac for extending the class as well as replacing the content etc..


can make base page like the following

<!doctype html>
<html>
	<head></head>
	<body>
		{% block content%}
			some hontent to be replaced
		{% endblock content%}

the page gonna be same but the body content will keep changing for each page
	</body>
		
</html>


how to inherit

--->> syntrax{% extends 'base.html' %}

-->> 		{% block content%}
			this is home page etc
		{% endblock %}

content is basically a variable we have created,
Note: do remember that the name of the variable i.e content should be same in all the child html pages

mistake: in urls i gave the same name i.e home for all routes

lec 17:
rendering context in a template

#Template context

template +context--> djnago turn that into regular hhtml raw wali

context meaning: any data type 


def about_view(request,*args, **kwargs):
	define data procees it and pass the variable or context
    return render(request,"about.html",#context #dta comes here--->>> {})

now render the data in the html or 


-->>> <p>
{{nameofthekey}},{{}}
</p>

it should come under content bloack as we are using inheritance thats why 

{% block xyzname}
-->>> <p>
{{nameofthekey}},{{}}
</p>
{% endblock}

lec 18, For loop

this is how you use for loop in django:

where key3 is a list

<ul>
	{% for item in key3 %}
<li>
	{{item}}
</li>
	{% endfor %}
</ul>
		
lec 19
conditions in template

 {% if somecondition %}
 {% elif %}
 {% else %}

lec 20
template tags and filter

extends, if, else for etc:

see follow the django socumnents


filter:

this is a pipe = "|"
we can make our custom filters

lec 21, imoprtant :  time to connect  to the databse

to open shell.. type this under virtual env of django

--->>python manage.py shell

here now we are gonna get details of product from database... in this product view
basically its for DB so... you will understand in detail while working on the stuff

so create a method something like this


whatever we gonna do

product_detail_view(request):
	context = {}
	return render(request,"the Html page relative link", context)



also, ex of a import == from products.models import Product
remember the inheritance stardard format

{% extends 'base.html ' %}

{% block content %}

{% blockend %}


Note: any URL added must be mentioned in the urls.py under settings so that django will be able to identify which URL it is

s\so the process is 
-->> edit adn add in views under the app
-->> make the template under the template folder or the folders you have defined
-->> add theat to the urls under mainproject folder


lecture 22:

we can resue app as well

inside of our app we can have templates, also we can override a template
we do this so that we can have reusable components:

NOTE:/ to experiment --->>> when django runs it looks for the template in admin, each and django app I guess...

(need to see lec 22 again)

so yeah its true: it look in django project, in admin and then in the app project
 for which the route is there

---------!!1 the above in term of concept--------!!!

lec 23 Django model forms



























